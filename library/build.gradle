apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"

    defaultConfig {
        minSdkVersion 1
        targetSdkVersion 25
        versionName project.version
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.5'
    compile 'javax.servlet:servlet-api:2.5'
    compile 'com.squareup.okhttp3:okhttp:3.4.2'

    testCompile 'org.testng:testng:6.9.10'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.openjdk.jmh:jmh-core:1.12'
    testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.12'
    testCompile 'com.squareup.okhttp3:okhttp:3.3.1'
    testCompile 'com.google.guava:guava:19.0'
}

// Turn on logging for all tests, filter to show failures/skips only
tasks.withType(Test) {
   // exclude integration tests
    exclude '**/IT*.class'
    exclude '**/*IT.class'
    exclude '**/*IT$*.class'

    testLogging {
        events "skipped", "failed"
        info {
           events "passed", "skipped", "failed"
        }
    }
}

def getAuthInfoFile() {
    if (!project.hasProperty(authInfoPropertyName)) {
        throw new GradleException('' +
            "These tests require the \"${authInfoPropertyName}\" " +
            "project property be set to point to an authorization JSON file " +
            "(e.g. ./gradlew integrationTest -P${authInfoPropertyName}=auth.json)."
        )
    }

    def authInfoFile = file(project.property(authInfoPropertyName))
    if (!authInfoFile.exists()) {
        throw new GradleException('' +
            "The test auth info file does not exist: \"${authInfoFile.absolutePath}\". " +
            "Please ensure the \"${authInfoPropertyName}\" project property is set to point to " +
            "the correct authorization JSON file."
        )
    }
    return authInfoFile
}


task integrationTest(type: Test) {
    description 'Runs integration tests against Production or Dev servers.'

    // only select integration tests (similar to maven-failsafe-plugin rules)
    include '**/IT*.class'
    include '**/*IT.class'
    include '**/*IT$*.class'

    testLogging {
        events "skipped", "failed"
        info {
            events "passed", "skipped", "failed"
        }
    }

    reports {
        html {
            destination = file("${buildDir}/reports/integration-tests")
        }
    }

    ext {
        authInfoPropertyName = 'com.dropbox.test.authInfoFile'
        httpRequestorPropertyName = 'com.dropbox.test.httpRequestor'
    }

    doFirst {
        systemProperty authInfoPropertyName, getAuthInfoFile().absolutePath
        if (project.hasProperty(httpRequestorPropertyName)) {
            systemProperty httpRequestorPropertyName, project.property(httpRequestorPropertyName)
        }
    }
}

tasks.withType(Javadoc) {
    title "${project.mavenName} ${project.version} API"

    failOnError true

    // JDK 8's javadoc has an on-by-default lint called "missing", which requires that everything
    // be documented. Disable this lint because we intentionally don't document some things.
    //
    // NOTE: ugly hack to set our doclint settings due to strange handling of string options by the
    // javadoc task.
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption "Xdoclint:all,-missing", true
    }
    options.addStringOption "link", "http://docs.oracle.com/javase/7/docs/api/"
}

apply from: 'stone.gradle'

// load release configuration
if (!project.version.contains('SNAPSHOT')) {
    //apply from: 'release.gradle'
}

apply plugin: 'com.getkeepsafe.dexcount'

dexcount {
    format = "list"
    includeClasses = true
    includeFieldCount = false
    orderByMethodCount = true
}
