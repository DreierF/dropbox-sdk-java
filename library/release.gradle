apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment ->
                    verifySdkVersion(deployment)
                    signing.signPom(deployment)
                }

                pom = project.basePom

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        destinationDir = file("../javadoc/")
        failOnError false
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}

task releaseTest() {
    dependsOn ':proguard:proguardTest'
    dependsOn ':library:test'
    dependsOn ':library:integrationTest'
}

/**
 * Verify our SDK version is set correctly in our artifact before uploading. This is to protect
 * against any silly mistakes.
 */
def verifySdkVersion(deployment) {
    deployment.mainArtifact.file.withInputStream { stream ->
        def jar = new java.util.jar.JarInputStream(stream)
        def entry = jar.getNextJarEntry()
        while (entry != null) {
            if (entry.getName().equals("sdk-version.txt")) {
                def version = jar.text.trim();
                if (!(version ==~ /\d+\.\d+\.\d+/)) {
                    throw new GradleException("SDK version not in semantic versioning format: " + version +
                                              ". Try running './gradlew clean' before uploading archives.");
                }
                return
            }
            entry = jar.getNextJarEntry()
        }

        throw new GradleException("Could not find sdk-version.txt in artifact: " + deployment.mainArtifact.file.absolutePath);
    }
}
